import java.net.URI

buildscript {
  val springVersion = property("springVersion").toString()
  repositories {
    maven {
      url = java.net.URI.create("https://maven.aliyun.com/repository/gradle-plugin")
    }
    mavenCentral()
    jcenter()
    gradlePluginPortal()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springVersion}")
    classpath("io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE")
    classpath("io.freefair.gradle:lombok-plugin:5.3.0")
  }
}

val mavenUrls = property("mavenUrls").toString()
subprojects {
  repositories {
    mavenUrls.split(",").forEach { repoUrl ->
      maven {
        url = URI.create(repoUrl.trim())
      }
    }
    mavenCentral()
    jcenter()
  }
}

subprojects {
  group = "XXXXXXXX"
  version = "XXXXXXXXXXX"
  apply {
    plugin("io.spring.dependency-management")
    plugin("checkstyle")
  }
  configure<io.spring.gradle.dependencymanagement.dsl.DependencyManagementExtension> {
    val springCloudVersion = property("springCloudVersion").toString()
    val nettyVersion = property("nettyVersion").toString()
    val guaveVersion = property("guaveVersion").toString()
    val protobufVersion = property("protobufVersion").toString()
    val junitJupiterVersion = property("junitJupiterVersion").toString()
    val grpcVersion = property("grpcVersion").toString()
    imports {
      mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    }
    dependencies {
      dependency("io.netty:netty-all:${nettyVersion}")
      dependency("io.netty:netty-transport-native-epoll:${nettyVersion}")
      dependency("com.google.guava:guava:${guaveVersion}")
      dependency("com.google.protobuf:protobuf-java-util:${protobufVersion}")
      dependency("org.junit.jupiter:junit-jupiter:${junitJupiterVersion}")
      // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
      dependency("com.google.protobuf:protobuf-java:${protobufVersion}")
      dependency("io.grpc:grpc-protobuf:${grpcVersion}")
      dependency("io.grpc:grpc-stub:${grpcVersion}")
      dependency("io.grpc:grpc-core:${grpcVersion}")
      dependency("io.grpc:grpc-context:${grpcVersion}")
      dependency("io.grpc:grpc-api:${grpcVersion}")
      dependency("io.grpc:grpc-netty-shaded:${grpcVersion}")
      dependency("io.grpc:grpc-netty:${grpcVersion}")
      // https://mvnrepository.com/artifact/io.grpc/grpc-netty
      dependency("io.grpc:grpc-services:${grpcVersion}")
      dependency("org.redisson:redisson-spring-boot-starter:3.14.1")
      dependency("net.devh:grpc-server-spring-boot-starter:2.11.0.RELEASE")
      dependency("net.devh:grpc-client-spring-boot-starter:2.11.0.RELEASE")
      dependency("com.alipay.sdk:alipay-sdk-java:4.11.0.ALL")
      dependency("com.alipay.sdk:alipay-easysdk:2.1.2")
      dependency("com.sensorsdata.analytics.javasdk:SensorsAnalyticsSDK:3.1.15")
      dependency("org.mockito:mockito-core:2.+")
    }
  }

  tasks.withType<Checkstyle>().configureEach {
    reports {
      xml.isEnabled = false
      html.isEnabled = true
    }
  }
}
