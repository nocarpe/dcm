server.port= 8082






#mybatis.mapper-locations=classpath:sqlmap/dcm/*Mapper.xml






#shardingspher 配置




spring.shardingsphere.datasource.names= dcm0,dcm1,dcm2

spring.shardingsphere.datasource.dcm0.url=  jdbc:mysql://10.23.30.125:3306/dcm0?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&zeroDateTimeBehavior=convertToNull
spring.shardingsphere.datasource.dcm0.type=  com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.dcm0.driver-class-name= com.mysql.jdbc.Driver
spring.shardingsphere.datasource.dcm0.username=ddmc
spring.shardingsphere.datasource.dcm0.password=ddmc@123
spring.shardingsphere.datasource.dcm0.testWhileIdle= true
spring.shardingsphere.datasource.dcm0.initialSize= 5
spring.shardingsphere.datasource.dcm0.validationQuery= select 'x'
spring.shardingsphere.datasource.dcm0.maxActive= 100




spring.shardingsphere.datasource.dcm1.url=jdbc:mysql://10.23.30.125:3306/dcm1?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&zeroDateTimeBehavior=convertToNull
spring.shardingsphere.datasource.dcm1.type=  com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.dcm1.driver-class-name= com.mysql.jdbc.Driver
spring.shardingsphere.datasource.dcm1.username=ddmc
spring.shardingsphere.datasource.dcm1.password= ddmc@123
spring.shardingsphere.datasource.dcm1.testWhileIdle= true
spring.shardingsphere.datasource.dcm1.initialSize= 5
spring.shardingsphere.datasource.dcm1.validationQuery= select 'x'
spring.shardingsphere.datasource.dcm1.maxActive= 100

spring.shardingsphere.datasource.dcm2.url= jdbc:mysql://10.23.30.125:3306/dcm2?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&zeroDateTimeBehavior=convertToNull
spring.shardingsphere.datasource.dcm2.type= com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.dcm2.driver-class-name= com.mysql.jdbc.Driver
spring.shardingsphere.datasource.dcm2.username= ddmc
spring.shardingsphere.datasource.dcm2.password= ddmc@123
spring.shardingsphere.datasource.dcm2.testWhileIdle= true
spring.shardingsphere.datasource.dcm2.initialSize= 5
spring.shardingsphere.datasource.dcm2.validationQuery= select 'x'
spring.shardingsphere.datasource.dcm2.maxActive= 100


## 标准分片表配置
#spring.shardingsphere.rules.sharding.tables.<table-name>.actual-data-nodes= # 由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持inline表达式。缺省表示使用已知数据源与逻辑表名称生成数据节点，用于广播表（即每个库中都需要一个同样的表用于关联查询，多为字典表）或只分库不分表且所有库的表结构完全一致的情况
#
## 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一
#
## 用于单分片键的标准分片场景
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.<sharding-algorithm-name>.sharding-column= # 分片列名称
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.standard.<sharding-algorithm-name>.sharding-algorithm-name= # 分片算法名称
#
## 用于多分片键的复合分片场景
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.<sharding-algorithm-name>.sharding-columns= # 分片列名称，多个列以逗号分隔
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.complex.<sharding-algorithm-name>.sharding-algorithm-name= # 分片算法名称
#
## 用于Hint 的分片策略
#spring.shardingsphere.rules.sharding.tables.<table-name>.database-strategy.hint.<sharding-algorithm-name>.sharding-algorithm-name= # 分片算法名称
#
## 分表策略，同分库策略
#spring.shardingsphere.rules.sharding.tables.<table-name>.table-strategy.xxx= # 省略
#
## 自动分片表配置
#spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.actual-data-sources= # 数据源名
#
#spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-column= # 分片列名称
#spring.shardingsphere.rules.sharding.auto-tables.<auto-table-name>.sharding-strategy.standard.sharding-algorithm= # 自动分片算法名称
#
## 分布式序列策略配置
#spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.column= # 分布式序列列名称
#spring.shardingsphere.rules.sharding.tables.<table-name>.key-generate-strategy.key-generator-name= # 分布式序列算法名称

#spring.shardingsphere.rules.sharding.binding-tables[0]= # 绑定表规则列表
#spring.shardingsphere.rules.sharding.binding-tables[1]= # 绑定表规则列表
#spring.shardingsphere.rules.sharding.binding-tables[x]= # 绑定表规则列表
#
#spring.shardingsphere.rules.sharding.broadcast-tables[0]= # 广播表规则列表
#spring.shardingsphere.rules.sharding.broadcast-tables[1]= # 广播表规则列表
#spring.shardingsphere.rules.sharding.broadcast-tables[x]= # 广播表规则列表

#分库策略
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column= no
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression= dcm$->{no%3}
#spring.shardingsphere.sharding.default-database-strategy.standard.precise-algorithm-class-name= com.dcm.application.domain

#分表策略
spring.shardingsphere.sharding.tables.tbl_dept.actual-data-nodes=dcm$->{0..2}.tbl_dept_$->{0..7}
spring.shardingsphere.sharding.tables.tbl_dept.table-strategy.inline.sharding-column=no
spring.shardingsphere.sharding.tables.tbl_dept.table-strategy.inline.algorithm-expression=tbl_dept_$->{no%8}
#spring.shardingsphere.sharding.tables.tbl_dept.key-generator.column=id


spring.shardingsphere.sharding.tables.tbl_tel.actual-data-nodes=dcm$->{0..2}.tbl_tel_$->{0..3}
spring.shardingsphere.sharding.tables.tbl_tel.table-strategy.inline.sharding-column=phone
spring.shardingsphere.sharding.tables.tbl_tel.table-strategy.inline.algorithm-expression=tbl_tel_$->{phone%3}
#spring.shardingsphere.sharding.tables.tbl_dept.key-generator.column=id


spring.shardingsphere.sharding.binding-tables=tbl_dept,tbl_tel



# 广播表, 其主节点是dcm0
#有一些表是没有分片的必要的
#
spring.shardingsphere.sharding.broadcast-tables=tbl_config
spring.shardingsphere.sharding.tables.tbl_config.actual-data-nodes=dcm$->{1}.tbl_config


# 分片算法配置
#spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.type= # 分片算法类型
#spring.shardingsphere.rules.sharding.sharding-algorithms.<sharding-algorithm-name>.props.xxx=# 分片算法属性配置
#
## 分布式序列算法配置
#spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.type= # 分布式序列算法类型
#spring.shardingsphere.rules.sharding.key-generators.<key-generate-algorithm-name>.props.xxx= # 分布式序列算法属性配置

spring.shardingsphere.props.sql.show=true

